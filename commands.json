{
    "commands": [
        {
            "command": [
                "patreon"
            ],
            "result": "https://www.patreon.com/user?u=7985126",
            "description": "link to calebs patreon",
            "image": null
        },
        {
            "command": [
                "hid",
                "bootloader"
            ],
            "result": "Take a look here: https://www.youtube.com/watch?v=Myon8H111PQ",
            "description": "link to bootloader video",
            "image": null
        },
        {
            "command": [
                "F4",
                "f4"
            ],
            "result": "Take a look here: https://www.youtube.com/watch?v=b1123kz_3MM",
            "description": "link to f4 video",
            "image": null
        },
        {
            "command": [
                "resistor",
                "res"
            ],
            "result": "There are two known resistor issues. For more info type $R3 or $R10",
            "description": "Resistor info",
            "image": null
        },
        {
            "command": [
                "R3",
                "r3"
            ],
            "result": "Some blue pills have a wrong resistor at R3. Sometimes it is close to 100k when it should be around 10k. The high value causes a voltage drop, which results in about 0.8V at the BOOT0 pin on the chip. This voltage is not high enough to be recognized as a logic high. This means the board will not enter the bootmode. Potential fix: desolder the resistor and solder a new one with a value close to 10k. Example:",
            "description": "R3 resistor problem explanation",
            "image": "https://i.imgur.com/hrd75KM.jpg"
        },
        {
            "command": [
                "R10",
                "r10"
            ],
            "result": "Some blue pills have a wrong resistor at R10. This resistor is used for USB communication and it should be 1.5k. If you want to use USB-communication you will need to replace it. First desolder the old R10 resistor and make sure the two pads are not connected. Next you have two options: Solder a 1.5k resistor directly to the pads (difficult/not recommended) or solder a resistor from a 3.3V pin to A12.",
            "description": "R10 resistor problem explanation",
            "image": null
        },
        {
            "command": [
                "hidsettings"
            ],
            "result": "These are the correct HID settings:",
            "description": "hid settings picture",
            "image": "https://imgur.com/u23mBhS"
        },
        {
            "command": [
                "ide",
                "IDE"
            ],
            "result": "**Option 1 - STM32CubeIDE** \nHAL: STM32 HAL or ST LL\n\u2022 The HAL offers high-level and feature-oriented APIs with a high-portability level. These hide the MCU and peripheral complexity from the end-user.\n\u2022 The LL offers low-level APIs at register level, with better optimization but less portability. These require deep knowledge of the MCU and peripheral specifications.\nIDE: STM32CubeIDE, Eclipse based, with integrated STM32CubeMX HAL generation(???)\nCompiler: GCC\nDebugger: GDB\n\nAdvantages: ?\nDisadvantages: Not portable, some people call the compilation toolchain worse than open source alternatives, eclipse is divisive...\n\n\n**Option 2 - Keil MDK Lite**\nHAL: None, you use CMSIS to build your own HAL\nIDE: Keil uVision\nCompiler: armcc or armclang (depending on the version)\n\nAdvantages: Potentially best option if I want to use CMSIS instead of the ST HAL? Well integrated?\nDisadvantages: Limitations on free version if I want to use more powerful chips but for the STM32F0 I am using it is fine\n\n\n**Option 3 - Generic IDE + CubeMX**\nHAL: Same as option 1\nIDE: VSCode or Atom or other similar\nCompiler: CMake + arm-none-eabi-gcc\nDebugger: gdb-multiarch\n\nAdvantages: Flexibility\nDisadvantages: Potentially more of a pain to use than the CubeIDE\n\n\n**Option 4 - Generic IDE + CMSIS**\nHAL: Same as option 2\nIDE: VSCode or Atom or other similar\nCompiler: CMake + arm-none-eabi-gcc\nDebugger: gdb-multiarch\n\nAdvantages: Flexibility, portability, use of open source etc\nDisadvantages: Potentially not easy to use as a beginner?\n\n\n**Option 5 - PlatformIO**\nHAL: Same as option 3 / 4\nIDE: VSCode or Atom\nCompiler: GCC\nDebugger: GDB\n\nAdvantages: open source, lots of frameworks, PIO core is portable, flexible configuration(.ini file is text based).\n\nDisadvantages: very poor serial monitor(terminal based), no detachable window (not good for multiple monitors),  no combo box option for configuration(due to text based)",
            "description": "IDE options explained",
            "image": null
        },
        {
            "command": [
                "hidsettingspio",
                "hidpio"
            ],
            "result": "These are the settings for using PlatformIO with the hid bootloader:\n\n```[env:bluepill_f103c8]\nplatform = ststm32\nboard = bluepill_f103c8\nframework = arduino\nupload_protocol = hid\nupload_port = COM?\nbuild_flags = \n    -D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC\n    -D USBCON\n    -D USBD_VID=0x0483\n    -D USB_MANUFACTURER=\"Unknown\"\n    -D USB_PRODUCT=\"\"BLUEPILL_F103C8\"\"\n    -D HAL_PCD_MODULE_ENABLED```",
            "description": "PlatformIO hid settings",
            "image": null
        },
        {
            "command": [
                "pinout"
            ],
            "result": "This is the pinout of the blue pill:",
            "description": "Blue Pill pinout",
            "image": "https://imgur.com/a/9wPFtMc"
        }
    ],
    "roles": [
        "Admin",
        "Mod",
        "Community Helper"
    ],
    "lastadds": []
}